// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_object_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_object_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_object_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_object_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_2eproto;
namespace vfs {
class ABObject;
struct ABObjectDefaultTypeInternal;
extern ABObjectDefaultTypeInternal _ABObject_default_instance_;
class PathRequest;
struct PathRequestDefaultTypeInternal;
extern PathRequestDefaultTypeInternal _PathRequest_default_instance_;
}  // namespace vfs
PROTOBUF_NAMESPACE_OPEN
template<> ::vfs::ABObject* Arena::CreateMaybeMessage<::vfs::ABObject>(Arena*);
template<> ::vfs::PathRequest* Arena::CreateMaybeMessage<::vfs::PathRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace vfs {

// ===================================================================

class PathRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vfs.PathRequest) */ {
 public:
  inline PathRequest() : PathRequest(nullptr) {}
  ~PathRequest() override;
  explicit constexpr PathRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathRequest(const PathRequest& from);
  PathRequest(PathRequest&& from) noexcept
    : PathRequest() {
    *this = ::std::move(from);
  }

  inline PathRequest& operator=(const PathRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathRequest& operator=(PathRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathRequest& default_instance() {
    return *internal_default_instance();
  }
  enum PathCase {
    kName = 1,
    kHandle = 2,
    PATH_NOT_SET = 0,
  };

  static inline const PathRequest* internal_default_instance() {
    return reinterpret_cast<const PathRequest*>(
               &_PathRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PathRequest& a, PathRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PathRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathRequest* New() const final {
    return new PathRequest();
  }

  PathRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vfs.PathRequest";
  }
  protected:
  explicit PathRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHandleFieldNumber = 2,
  };
  // string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 handle = 2;
  bool has_handle() const;
  private:
  bool _internal_has_handle() const;
  public:
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::int64 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_handle() const;
  void _internal_set_handle(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_path();
  PathCase path_case() const;
  // @@protoc_insertion_point(class_scope:vfs.PathRequest)
 private:
  class _Internal;
  void set_has_name();
  void set_has_handle();

  inline bool has_path() const;
  inline void clear_has_path();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union PathUnion {
    constexpr PathUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::int64 handle_;
  } path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_object_2eproto;
};
// -------------------------------------------------------------------

class ABObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vfs.ABObject) */ {
 public:
  inline ABObject() : ABObject(nullptr) {}
  ~ABObject() override;
  explicit constexpr ABObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ABObject(const ABObject& from);
  ABObject(ABObject&& from) noexcept
    : ABObject() {
    *this = ::std::move(from);
  }

  inline ABObject& operator=(const ABObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ABObject& operator=(ABObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ABObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ABObject* internal_default_instance() {
    return reinterpret_cast<const ABObject*>(
               &_ABObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ABObject& a, ABObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ABObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ABObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ABObject* New() const final {
    return new ABObject();
  }

  ABObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ABObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ABObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ABObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ABObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "vfs.ABObject";
  }
  protected:
  explicit ABObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kMimeTypeFieldNumber = 7,
    kServerNameFieldNumber = 8,
    kDbPathFieldNumber = 9,
    kFullDbPathFieldNumber = 10,
    kCheckOutPathFieldNumber = 11,
    kLocalPathFieldNumber = 12,
    kWorkingPathFieldNumber = 13,
    kServerPathFieldNumber = 14,
    kLockedAtFieldNumber = 15,
    kCreatedAtFieldNumber = 16,
    kCreatedByFieldNumber = 17,
    kLockedByFieldNumber = 18,
    kLockedOnFieldNumber = 19,
    kCheckOutCommentFieldNumber = 20,
    kLowLevelLockedOnFieldNumber = 21,
    kLowLevelLockedByFieldNumber = 22,
    kLowLevelLockedAtFieldNumber = 23,
    kLowLevelLockCommentFieldNumber = 24,
    kCheckInCommentFieldNumber = 25,
    kCommentFieldNumber = 26,
    kKeywordsFieldNumber = 27,
    kAuthorFieldNumber = 28,
    kSFSZFieldNumber = 29,
    kSCRCFieldNumber = 30,
    kSCRTFieldNumber = 31,
    kSMOTFieldNumber = 32,
    kSCITFieldNumber = 33,
    kSIMTFieldNumber = 34,
    kSCOTFieldNumber = 35,
    kUserFolderFieldNumber = 36,
    kUserHandleFieldNumber = 37,
    kUserSessionFieldNumber = 38,
    kUserMachineFieldNumber = 39,
    kUserNameFieldNumber = 40,
    kNxNSignOffItemStatusFieldNumber = 41,
    kNxNSignOffItemDueDateFieldNumber = 42,
    kNxNSignOffItemUserFieldNumber = 43,
    kChangedByFieldNumber = 45,
    kParentPathFieldNumber = 46,
    kNxNVersionNumberFieldNumber = 47,
    kFlagsFieldNumber = 1,
    kDbLevelFieldNumber = 3,
    kHandleFieldNumber = 4,
    kParentHandleFieldNumber = 5,
    kChildCountFieldNumber = 6,
    kChangedAtFieldNumber = 44,
    kIsDirectoryFieldNumber = 48,
    kLocalOnlyFieldNumber = 49,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string mimeType = 7;
  void clear_mimetype();
  const std::string& mimetype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mimetype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mimetype();
  PROTOBUF_MUST_USE_RESULT std::string* release_mimetype();
  void set_allocated_mimetype(std::string* mimetype);
  private:
  const std::string& _internal_mimetype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mimetype(const std::string& value);
  std::string* _internal_mutable_mimetype();
  public:

  // string serverName = 8;
  void clear_servername();
  const std::string& servername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_servername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_servername();
  PROTOBUF_MUST_USE_RESULT std::string* release_servername();
  void set_allocated_servername(std::string* servername);
  private:
  const std::string& _internal_servername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_servername(const std::string& value);
  std::string* _internal_mutable_servername();
  public:

  // string dbPath = 9;
  void clear_dbpath();
  const std::string& dbpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dbpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dbpath();
  PROTOBUF_MUST_USE_RESULT std::string* release_dbpath();
  void set_allocated_dbpath(std::string* dbpath);
  private:
  const std::string& _internal_dbpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dbpath(const std::string& value);
  std::string* _internal_mutable_dbpath();
  public:

  // string fullDbPath = 10;
  void clear_fulldbpath();
  const std::string& fulldbpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fulldbpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fulldbpath();
  PROTOBUF_MUST_USE_RESULT std::string* release_fulldbpath();
  void set_allocated_fulldbpath(std::string* fulldbpath);
  private:
  const std::string& _internal_fulldbpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fulldbpath(const std::string& value);
  std::string* _internal_mutable_fulldbpath();
  public:

  // string checkOutPath = 11;
  void clear_checkoutpath();
  const std::string& checkoutpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_checkoutpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_checkoutpath();
  PROTOBUF_MUST_USE_RESULT std::string* release_checkoutpath();
  void set_allocated_checkoutpath(std::string* checkoutpath);
  private:
  const std::string& _internal_checkoutpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checkoutpath(const std::string& value);
  std::string* _internal_mutable_checkoutpath();
  public:

  // string localPath = 12;
  void clear_localpath();
  const std::string& localpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_localpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_localpath();
  PROTOBUF_MUST_USE_RESULT std::string* release_localpath();
  void set_allocated_localpath(std::string* localpath);
  private:
  const std::string& _internal_localpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_localpath(const std::string& value);
  std::string* _internal_mutable_localpath();
  public:

  // string workingPath = 13;
  void clear_workingpath();
  const std::string& workingpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workingpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workingpath();
  PROTOBUF_MUST_USE_RESULT std::string* release_workingpath();
  void set_allocated_workingpath(std::string* workingpath);
  private:
  const std::string& _internal_workingpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workingpath(const std::string& value);
  std::string* _internal_mutable_workingpath();
  public:

  // string serverPath = 14;
  void clear_serverpath();
  const std::string& serverpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serverpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serverpath();
  PROTOBUF_MUST_USE_RESULT std::string* release_serverpath();
  void set_allocated_serverpath(std::string* serverpath);
  private:
  const std::string& _internal_serverpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serverpath(const std::string& value);
  std::string* _internal_mutable_serverpath();
  public:

  // string lockedAt = 15;
  void clear_lockedat();
  const std::string& lockedat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lockedat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lockedat();
  PROTOBUF_MUST_USE_RESULT std::string* release_lockedat();
  void set_allocated_lockedat(std::string* lockedat);
  private:
  const std::string& _internal_lockedat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lockedat(const std::string& value);
  std::string* _internal_mutable_lockedat();
  public:

  // string createdAt = 16;
  void clear_createdat();
  const std::string& createdat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createdat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createdat();
  PROTOBUF_MUST_USE_RESULT std::string* release_createdat();
  void set_allocated_createdat(std::string* createdat);
  private:
  const std::string& _internal_createdat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdat(const std::string& value);
  std::string* _internal_mutable_createdat();
  public:

  // string createdBy = 17;
  void clear_createdby();
  const std::string& createdby() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createdby(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createdby();
  PROTOBUF_MUST_USE_RESULT std::string* release_createdby();
  void set_allocated_createdby(std::string* createdby);
  private:
  const std::string& _internal_createdby() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createdby(const std::string& value);
  std::string* _internal_mutable_createdby();
  public:

  // string lockedBy = 18;
  void clear_lockedby();
  const std::string& lockedby() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lockedby(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lockedby();
  PROTOBUF_MUST_USE_RESULT std::string* release_lockedby();
  void set_allocated_lockedby(std::string* lockedby);
  private:
  const std::string& _internal_lockedby() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lockedby(const std::string& value);
  std::string* _internal_mutable_lockedby();
  public:

  // string lockedOn = 19;
  void clear_lockedon();
  const std::string& lockedon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lockedon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lockedon();
  PROTOBUF_MUST_USE_RESULT std::string* release_lockedon();
  void set_allocated_lockedon(std::string* lockedon);
  private:
  const std::string& _internal_lockedon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lockedon(const std::string& value);
  std::string* _internal_mutable_lockedon();
  public:

  // string checkOutComment = 20;
  void clear_checkoutcomment();
  const std::string& checkoutcomment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_checkoutcomment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_checkoutcomment();
  PROTOBUF_MUST_USE_RESULT std::string* release_checkoutcomment();
  void set_allocated_checkoutcomment(std::string* checkoutcomment);
  private:
  const std::string& _internal_checkoutcomment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checkoutcomment(const std::string& value);
  std::string* _internal_mutable_checkoutcomment();
  public:

  // string lowLevelLockedOn = 21;
  void clear_lowlevellockedon();
  const std::string& lowlevellockedon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lowlevellockedon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lowlevellockedon();
  PROTOBUF_MUST_USE_RESULT std::string* release_lowlevellockedon();
  void set_allocated_lowlevellockedon(std::string* lowlevellockedon);
  private:
  const std::string& _internal_lowlevellockedon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lowlevellockedon(const std::string& value);
  std::string* _internal_mutable_lowlevellockedon();
  public:

  // string lowLevelLockedBy = 22;
  void clear_lowlevellockedby();
  const std::string& lowlevellockedby() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lowlevellockedby(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lowlevellockedby();
  PROTOBUF_MUST_USE_RESULT std::string* release_lowlevellockedby();
  void set_allocated_lowlevellockedby(std::string* lowlevellockedby);
  private:
  const std::string& _internal_lowlevellockedby() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lowlevellockedby(const std::string& value);
  std::string* _internal_mutable_lowlevellockedby();
  public:

  // string lowLevelLockedAt = 23;
  void clear_lowlevellockedat();
  const std::string& lowlevellockedat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lowlevellockedat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lowlevellockedat();
  PROTOBUF_MUST_USE_RESULT std::string* release_lowlevellockedat();
  void set_allocated_lowlevellockedat(std::string* lowlevellockedat);
  private:
  const std::string& _internal_lowlevellockedat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lowlevellockedat(const std::string& value);
  std::string* _internal_mutable_lowlevellockedat();
  public:

  // string lowLevelLockComment = 24;
  void clear_lowlevellockcomment();
  const std::string& lowlevellockcomment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lowlevellockcomment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lowlevellockcomment();
  PROTOBUF_MUST_USE_RESULT std::string* release_lowlevellockcomment();
  void set_allocated_lowlevellockcomment(std::string* lowlevellockcomment);
  private:
  const std::string& _internal_lowlevellockcomment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lowlevellockcomment(const std::string& value);
  std::string* _internal_mutable_lowlevellockcomment();
  public:

  // string checkInComment = 25;
  void clear_checkincomment();
  const std::string& checkincomment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_checkincomment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_checkincomment();
  PROTOBUF_MUST_USE_RESULT std::string* release_checkincomment();
  void set_allocated_checkincomment(std::string* checkincomment);
  private:
  const std::string& _internal_checkincomment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_checkincomment(const std::string& value);
  std::string* _internal_mutable_checkincomment();
  public:

  // string comment = 26;
  void clear_comment();
  const std::string& comment() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_comment(ArgT0&& arg0, ArgT... args);
  std::string* mutable_comment();
  PROTOBUF_MUST_USE_RESULT std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // string keywords = 27;
  void clear_keywords();
  const std::string& keywords() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keywords(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keywords();
  PROTOBUF_MUST_USE_RESULT std::string* release_keywords();
  void set_allocated_keywords(std::string* keywords);
  private:
  const std::string& _internal_keywords() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keywords(const std::string& value);
  std::string* _internal_mutable_keywords();
  public:

  // string author = 28;
  void clear_author();
  const std::string& author() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_author(ArgT0&& arg0, ArgT... args);
  std::string* mutable_author();
  PROTOBUF_MUST_USE_RESULT std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // string SFSZ = 29;
  void clear_sfsz();
  const std::string& sfsz() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sfsz(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sfsz();
  PROTOBUF_MUST_USE_RESULT std::string* release_sfsz();
  void set_allocated_sfsz(std::string* sfsz);
  private:
  const std::string& _internal_sfsz() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sfsz(const std::string& value);
  std::string* _internal_mutable_sfsz();
  public:

  // string SCRC = 30;
  void clear_scrc();
  const std::string& scrc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scrc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scrc();
  PROTOBUF_MUST_USE_RESULT std::string* release_scrc();
  void set_allocated_scrc(std::string* scrc);
  private:
  const std::string& _internal_scrc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scrc(const std::string& value);
  std::string* _internal_mutable_scrc();
  public:

  // string SCRT = 31;
  void clear_scrt();
  const std::string& scrt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scrt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scrt();
  PROTOBUF_MUST_USE_RESULT std::string* release_scrt();
  void set_allocated_scrt(std::string* scrt);
  private:
  const std::string& _internal_scrt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scrt(const std::string& value);
  std::string* _internal_mutable_scrt();
  public:

  // string SMOT = 32;
  void clear_smot();
  const std::string& smot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_smot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_smot();
  PROTOBUF_MUST_USE_RESULT std::string* release_smot();
  void set_allocated_smot(std::string* smot);
  private:
  const std::string& _internal_smot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_smot(const std::string& value);
  std::string* _internal_mutable_smot();
  public:

  // string SCIT = 33;
  void clear_scit();
  const std::string& scit() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scit(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scit();
  PROTOBUF_MUST_USE_RESULT std::string* release_scit();
  void set_allocated_scit(std::string* scit);
  private:
  const std::string& _internal_scit() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scit(const std::string& value);
  std::string* _internal_mutable_scit();
  public:

  // string SIMT = 34;
  void clear_simt();
  const std::string& simt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_simt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_simt();
  PROTOBUF_MUST_USE_RESULT std::string* release_simt();
  void set_allocated_simt(std::string* simt);
  private:
  const std::string& _internal_simt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_simt(const std::string& value);
  std::string* _internal_mutable_simt();
  public:

  // string SCOT = 35;
  void clear_scot();
  const std::string& scot() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scot(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scot();
  PROTOBUF_MUST_USE_RESULT std::string* release_scot();
  void set_allocated_scot(std::string* scot);
  private:
  const std::string& _internal_scot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scot(const std::string& value);
  std::string* _internal_mutable_scot();
  public:

  // string userFolder = 36;
  void clear_userfolder();
  const std::string& userfolder() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userfolder(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userfolder();
  PROTOBUF_MUST_USE_RESULT std::string* release_userfolder();
  void set_allocated_userfolder(std::string* userfolder);
  private:
  const std::string& _internal_userfolder() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userfolder(const std::string& value);
  std::string* _internal_mutable_userfolder();
  public:

  // string userHandle = 37;
  void clear_userhandle();
  const std::string& userhandle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_userhandle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_userhandle();
  PROTOBUF_MUST_USE_RESULT std::string* release_userhandle();
  void set_allocated_userhandle(std::string* userhandle);
  private:
  const std::string& _internal_userhandle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userhandle(const std::string& value);
  std::string* _internal_mutable_userhandle();
  public:

  // string userSession = 38;
  void clear_usersession();
  const std::string& usersession() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usersession(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usersession();
  PROTOBUF_MUST_USE_RESULT std::string* release_usersession();
  void set_allocated_usersession(std::string* usersession);
  private:
  const std::string& _internal_usersession() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usersession(const std::string& value);
  std::string* _internal_mutable_usersession();
  public:

  // string userMachine = 39;
  void clear_usermachine();
  const std::string& usermachine() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usermachine(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usermachine();
  PROTOBUF_MUST_USE_RESULT std::string* release_usermachine();
  void set_allocated_usermachine(std::string* usermachine);
  private:
  const std::string& _internal_usermachine() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usermachine(const std::string& value);
  std::string* _internal_mutable_usermachine();
  public:

  // string userName = 40;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_MUST_USE_RESULT std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string nxNSignOff_ItemStatus = 41;
  void clear_nxnsignoff_itemstatus();
  const std::string& nxnsignoff_itemstatus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nxnsignoff_itemstatus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nxnsignoff_itemstatus();
  PROTOBUF_MUST_USE_RESULT std::string* release_nxnsignoff_itemstatus();
  void set_allocated_nxnsignoff_itemstatus(std::string* nxnsignoff_itemstatus);
  private:
  const std::string& _internal_nxnsignoff_itemstatus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nxnsignoff_itemstatus(const std::string& value);
  std::string* _internal_mutable_nxnsignoff_itemstatus();
  public:

  // string nxNSignOff_ItemDueDate = 42;
  void clear_nxnsignoff_itemduedate();
  const std::string& nxnsignoff_itemduedate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nxnsignoff_itemduedate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nxnsignoff_itemduedate();
  PROTOBUF_MUST_USE_RESULT std::string* release_nxnsignoff_itemduedate();
  void set_allocated_nxnsignoff_itemduedate(std::string* nxnsignoff_itemduedate);
  private:
  const std::string& _internal_nxnsignoff_itemduedate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nxnsignoff_itemduedate(const std::string& value);
  std::string* _internal_mutable_nxnsignoff_itemduedate();
  public:

  // string nxNSignOff_ItemUser = 43;
  void clear_nxnsignoff_itemuser();
  const std::string& nxnsignoff_itemuser() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nxnsignoff_itemuser(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nxnsignoff_itemuser();
  PROTOBUF_MUST_USE_RESULT std::string* release_nxnsignoff_itemuser();
  void set_allocated_nxnsignoff_itemuser(std::string* nxnsignoff_itemuser);
  private:
  const std::string& _internal_nxnsignoff_itemuser() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nxnsignoff_itemuser(const std::string& value);
  std::string* _internal_mutable_nxnsignoff_itemuser();
  public:

  // string changedBy = 45;
  void clear_changedby();
  const std::string& changedby() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_changedby(ArgT0&& arg0, ArgT... args);
  std::string* mutable_changedby();
  PROTOBUF_MUST_USE_RESULT std::string* release_changedby();
  void set_allocated_changedby(std::string* changedby);
  private:
  const std::string& _internal_changedby() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_changedby(const std::string& value);
  std::string* _internal_mutable_changedby();
  public:

  // string parentPath = 46;
  void clear_parentpath();
  const std::string& parentpath() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parentpath(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parentpath();
  PROTOBUF_MUST_USE_RESULT std::string* release_parentpath();
  void set_allocated_parentpath(std::string* parentpath);
  private:
  const std::string& _internal_parentpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parentpath(const std::string& value);
  std::string* _internal_mutable_parentpath();
  public:

  // string nxN_VersionNumber = 47;
  void clear_nxn_versionnumber();
  const std::string& nxn_versionnumber() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nxn_versionnumber(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nxn_versionnumber();
  PROTOBUF_MUST_USE_RESULT std::string* release_nxn_versionnumber();
  void set_allocated_nxn_versionnumber(std::string* nxn_versionnumber);
  private:
  const std::string& _internal_nxn_versionnumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nxn_versionnumber(const std::string& value);
  std::string* _internal_mutable_nxn_versionnumber();
  public:

  // int32 flags = 1;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 dbLevel = 3;
  void clear_dblevel();
  ::PROTOBUF_NAMESPACE_ID::int32 dblevel() const;
  void set_dblevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dblevel() const;
  void _internal_set_dblevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 handle = 4;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::int64 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_handle() const;
  void _internal_set_handle(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 parentHandle = 5;
  void clear_parenthandle();
  ::PROTOBUF_NAMESPACE_ID::int64 parenthandle() const;
  void set_parenthandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_parenthandle() const;
  void _internal_set_parenthandle(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 childCount = 6;
  void clear_childcount();
  ::PROTOBUF_NAMESPACE_ID::int64 childcount() const;
  void set_childcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_childcount() const;
  void _internal_set_childcount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 changedAt = 44;
  void clear_changedat();
  ::PROTOBUF_NAMESPACE_ID::int64 changedat() const;
  void set_changedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_changedat() const;
  void _internal_set_changedat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool isDirectory = 48;
  void clear_isdirectory();
  bool isdirectory() const;
  void set_isdirectory(bool value);
  private:
  bool _internal_isdirectory() const;
  void _internal_set_isdirectory(bool value);
  public:

  // bool localOnly = 49;
  void clear_localonly();
  bool localonly() const;
  void set_localonly(bool value);
  private:
  bool _internal_localonly() const;
  void _internal_set_localonly(bool value);
  public:

  // @@protoc_insertion_point(class_scope:vfs.ABObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mimetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr servername_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dbpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fulldbpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkoutpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workingpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serverpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lockedat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdby_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lockedby_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lockedon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkoutcomment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lowlevellockedon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lowlevellockedby_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lowlevellockedat_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lowlevellockcomment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr checkincomment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keywords_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sfsz_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scrc_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scrt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr simt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userfolder_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userhandle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usersession_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usermachine_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nxnsignoff_itemstatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nxnsignoff_itemduedate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nxnsignoff_itemuser_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr changedby_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nxn_versionnumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::int32 dblevel_;
  ::PROTOBUF_NAMESPACE_ID::int64 handle_;
  ::PROTOBUF_NAMESPACE_ID::int64 parenthandle_;
  ::PROTOBUF_NAMESPACE_ID::int64 childcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 changedat_;
  bool isdirectory_;
  bool localonly_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_object_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PathRequest

// string name = 1;
inline bool PathRequest::_internal_has_name() const {
  return path_case() == kName;
}
inline bool PathRequest::has_name() const {
  return _internal_has_name();
}
inline void PathRequest::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void PathRequest::clear_name() {
  if (_internal_has_name()) {
    path_.name_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_path();
  }
}
inline const std::string& PathRequest::name() const {
  // @@protoc_insertion_point(field_get:vfs.PathRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void PathRequest::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_path();
    set_has_name();
    path_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_.name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.PathRequest.name)
}
inline std::string* PathRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vfs.PathRequest.name)
  return _s;
}
inline const std::string& PathRequest::_internal_name() const {
  if (_internal_has_name()) {
    return path_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PathRequest::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_path();
    set_has_name();
    path_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  path_.name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathRequest::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_path();
    set_has_name();
    path_.name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return path_.name_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathRequest::release_name() {
  // @@protoc_insertion_point(field_release:vfs.PathRequest.name)
  if (_internal_has_name()) {
    clear_has_path();
    return path_.name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void PathRequest::set_allocated_name(std::string* name) {
  if (has_path()) {
    clear_path();
  }
  if (name != nullptr) {
    set_has_name();
    path_.name_.UnsafeSetDefault(name);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(name);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:vfs.PathRequest.name)
}

// int64 handle = 2;
inline bool PathRequest::_internal_has_handle() const {
  return path_case() == kHandle;
}
inline bool PathRequest::has_handle() const {
  return _internal_has_handle();
}
inline void PathRequest::set_has_handle() {
  _oneof_case_[0] = kHandle;
}
inline void PathRequest::clear_handle() {
  if (_internal_has_handle()) {
    path_.handle_ = int64_t{0};
    clear_has_path();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PathRequest::_internal_handle() const {
  if (_internal_has_handle()) {
    return path_.handle_;
  }
  return int64_t{0};
}
inline void PathRequest::_internal_set_handle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_handle()) {
    clear_path();
    set_has_handle();
  }
  path_.handle_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PathRequest::handle() const {
  // @@protoc_insertion_point(field_get:vfs.PathRequest.handle)
  return _internal_handle();
}
inline void PathRequest::set_handle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:vfs.PathRequest.handle)
}

inline bool PathRequest::has_path() const {
  return path_case() != PATH_NOT_SET;
}
inline void PathRequest::clear_has_path() {
  _oneof_case_[0] = PATH_NOT_SET;
}
inline PathRequest::PathCase PathRequest::path_case() const {
  return PathRequest::PathCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ABObject

// int32 flags = 1;
inline void ABObject::clear_flags() {
  flags_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ABObject::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ABObject::flags() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.flags)
  return _internal_flags();
}
inline void ABObject::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flags_ = value;
}
inline void ABObject::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:vfs.ABObject.flags)
}

// string name = 2;
inline void ABObject::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ABObject::name() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.name)
}
inline std::string* ABObject::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.name)
  return _s;
}
inline const std::string& ABObject::_internal_name() const {
  return name_.Get();
}
inline void ABObject::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_name() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.name)
}

// int32 dbLevel = 3;
inline void ABObject::clear_dblevel() {
  dblevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ABObject::_internal_dblevel() const {
  return dblevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ABObject::dblevel() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.dbLevel)
  return _internal_dblevel();
}
inline void ABObject::_internal_set_dblevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dblevel_ = value;
}
inline void ABObject::set_dblevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dblevel(value);
  // @@protoc_insertion_point(field_set:vfs.ABObject.dbLevel)
}

// int64 handle = 4;
inline void ABObject::clear_handle() {
  handle_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABObject::_internal_handle() const {
  return handle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABObject::handle() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.handle)
  return _internal_handle();
}
inline void ABObject::_internal_set_handle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  handle_ = value;
}
inline void ABObject::set_handle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_handle(value);
  // @@protoc_insertion_point(field_set:vfs.ABObject.handle)
}

// int64 parentHandle = 5;
inline void ABObject::clear_parenthandle() {
  parenthandle_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABObject::_internal_parenthandle() const {
  return parenthandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABObject::parenthandle() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.parentHandle)
  return _internal_parenthandle();
}
inline void ABObject::_internal_set_parenthandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  parenthandle_ = value;
}
inline void ABObject::set_parenthandle(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_parenthandle(value);
  // @@protoc_insertion_point(field_set:vfs.ABObject.parentHandle)
}

// int64 childCount = 6;
inline void ABObject::clear_childcount() {
  childcount_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABObject::_internal_childcount() const {
  return childcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABObject::childcount() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.childCount)
  return _internal_childcount();
}
inline void ABObject::_internal_set_childcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  childcount_ = value;
}
inline void ABObject::set_childcount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_childcount(value);
  // @@protoc_insertion_point(field_set:vfs.ABObject.childCount)
}

// string mimeType = 7;
inline void ABObject::clear_mimetype() {
  mimetype_.ClearToEmpty();
}
inline const std::string& ABObject::mimetype() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.mimeType)
  return _internal_mimetype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_mimetype(ArgT0&& arg0, ArgT... args) {
 
 mimetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.mimeType)
}
inline std::string* ABObject::mutable_mimetype() {
  std::string* _s = _internal_mutable_mimetype();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.mimeType)
  return _s;
}
inline const std::string& ABObject::_internal_mimetype() const {
  return mimetype_.Get();
}
inline void ABObject::_internal_set_mimetype(const std::string& value) {
  
  mimetype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_mimetype() {
  
  return mimetype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_mimetype() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.mimeType)
  return mimetype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_mimetype(std::string* mimetype) {
  if (mimetype != nullptr) {
    
  } else {
    
  }
  mimetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mimetype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.mimeType)
}

// string serverName = 8;
inline void ABObject::clear_servername() {
  servername_.ClearToEmpty();
}
inline const std::string& ABObject::servername() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.serverName)
  return _internal_servername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_servername(ArgT0&& arg0, ArgT... args) {
 
 servername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.serverName)
}
inline std::string* ABObject::mutable_servername() {
  std::string* _s = _internal_mutable_servername();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.serverName)
  return _s;
}
inline const std::string& ABObject::_internal_servername() const {
  return servername_.Get();
}
inline void ABObject::_internal_set_servername(const std::string& value) {
  
  servername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_servername() {
  
  return servername_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_servername() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.serverName)
  return servername_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_servername(std::string* servername) {
  if (servername != nullptr) {
    
  } else {
    
  }
  servername_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), servername,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.serverName)
}

// string dbPath = 9;
inline void ABObject::clear_dbpath() {
  dbpath_.ClearToEmpty();
}
inline const std::string& ABObject::dbpath() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.dbPath)
  return _internal_dbpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_dbpath(ArgT0&& arg0, ArgT... args) {
 
 dbpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.dbPath)
}
inline std::string* ABObject::mutable_dbpath() {
  std::string* _s = _internal_mutable_dbpath();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.dbPath)
  return _s;
}
inline const std::string& ABObject::_internal_dbpath() const {
  return dbpath_.Get();
}
inline void ABObject::_internal_set_dbpath(const std::string& value) {
  
  dbpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_dbpath() {
  
  return dbpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_dbpath() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.dbPath)
  return dbpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_dbpath(std::string* dbpath) {
  if (dbpath != nullptr) {
    
  } else {
    
  }
  dbpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dbpath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.dbPath)
}

// string fullDbPath = 10;
inline void ABObject::clear_fulldbpath() {
  fulldbpath_.ClearToEmpty();
}
inline const std::string& ABObject::fulldbpath() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.fullDbPath)
  return _internal_fulldbpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_fulldbpath(ArgT0&& arg0, ArgT... args) {
 
 fulldbpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.fullDbPath)
}
inline std::string* ABObject::mutable_fulldbpath() {
  std::string* _s = _internal_mutable_fulldbpath();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.fullDbPath)
  return _s;
}
inline const std::string& ABObject::_internal_fulldbpath() const {
  return fulldbpath_.Get();
}
inline void ABObject::_internal_set_fulldbpath(const std::string& value) {
  
  fulldbpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_fulldbpath() {
  
  return fulldbpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_fulldbpath() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.fullDbPath)
  return fulldbpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_fulldbpath(std::string* fulldbpath) {
  if (fulldbpath != nullptr) {
    
  } else {
    
  }
  fulldbpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fulldbpath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.fullDbPath)
}

// string checkOutPath = 11;
inline void ABObject::clear_checkoutpath() {
  checkoutpath_.ClearToEmpty();
}
inline const std::string& ABObject::checkoutpath() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.checkOutPath)
  return _internal_checkoutpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_checkoutpath(ArgT0&& arg0, ArgT... args) {
 
 checkoutpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.checkOutPath)
}
inline std::string* ABObject::mutable_checkoutpath() {
  std::string* _s = _internal_mutable_checkoutpath();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.checkOutPath)
  return _s;
}
inline const std::string& ABObject::_internal_checkoutpath() const {
  return checkoutpath_.Get();
}
inline void ABObject::_internal_set_checkoutpath(const std::string& value) {
  
  checkoutpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_checkoutpath() {
  
  return checkoutpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_checkoutpath() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.checkOutPath)
  return checkoutpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_checkoutpath(std::string* checkoutpath) {
  if (checkoutpath != nullptr) {
    
  } else {
    
  }
  checkoutpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkoutpath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.checkOutPath)
}

// string localPath = 12;
inline void ABObject::clear_localpath() {
  localpath_.ClearToEmpty();
}
inline const std::string& ABObject::localpath() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.localPath)
  return _internal_localpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_localpath(ArgT0&& arg0, ArgT... args) {
 
 localpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.localPath)
}
inline std::string* ABObject::mutable_localpath() {
  std::string* _s = _internal_mutable_localpath();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.localPath)
  return _s;
}
inline const std::string& ABObject::_internal_localpath() const {
  return localpath_.Get();
}
inline void ABObject::_internal_set_localpath(const std::string& value) {
  
  localpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_localpath() {
  
  return localpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_localpath() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.localPath)
  return localpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_localpath(std::string* localpath) {
  if (localpath != nullptr) {
    
  } else {
    
  }
  localpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localpath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.localPath)
}

// string workingPath = 13;
inline void ABObject::clear_workingpath() {
  workingpath_.ClearToEmpty();
}
inline const std::string& ABObject::workingpath() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.workingPath)
  return _internal_workingpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_workingpath(ArgT0&& arg0, ArgT... args) {
 
 workingpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.workingPath)
}
inline std::string* ABObject::mutable_workingpath() {
  std::string* _s = _internal_mutable_workingpath();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.workingPath)
  return _s;
}
inline const std::string& ABObject::_internal_workingpath() const {
  return workingpath_.Get();
}
inline void ABObject::_internal_set_workingpath(const std::string& value) {
  
  workingpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_workingpath() {
  
  return workingpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_workingpath() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.workingPath)
  return workingpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_workingpath(std::string* workingpath) {
  if (workingpath != nullptr) {
    
  } else {
    
  }
  workingpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workingpath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.workingPath)
}

// string serverPath = 14;
inline void ABObject::clear_serverpath() {
  serverpath_.ClearToEmpty();
}
inline const std::string& ABObject::serverpath() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.serverPath)
  return _internal_serverpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_serverpath(ArgT0&& arg0, ArgT... args) {
 
 serverpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.serverPath)
}
inline std::string* ABObject::mutable_serverpath() {
  std::string* _s = _internal_mutable_serverpath();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.serverPath)
  return _s;
}
inline const std::string& ABObject::_internal_serverpath() const {
  return serverpath_.Get();
}
inline void ABObject::_internal_set_serverpath(const std::string& value) {
  
  serverpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_serverpath() {
  
  return serverpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_serverpath() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.serverPath)
  return serverpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_serverpath(std::string* serverpath) {
  if (serverpath != nullptr) {
    
  } else {
    
  }
  serverpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serverpath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.serverPath)
}

// string lockedAt = 15;
inline void ABObject::clear_lockedat() {
  lockedat_.ClearToEmpty();
}
inline const std::string& ABObject::lockedat() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.lockedAt)
  return _internal_lockedat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_lockedat(ArgT0&& arg0, ArgT... args) {
 
 lockedat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.lockedAt)
}
inline std::string* ABObject::mutable_lockedat() {
  std::string* _s = _internal_mutable_lockedat();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.lockedAt)
  return _s;
}
inline const std::string& ABObject::_internal_lockedat() const {
  return lockedat_.Get();
}
inline void ABObject::_internal_set_lockedat(const std::string& value) {
  
  lockedat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_lockedat() {
  
  return lockedat_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_lockedat() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.lockedAt)
  return lockedat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_lockedat(std::string* lockedat) {
  if (lockedat != nullptr) {
    
  } else {
    
  }
  lockedat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lockedat,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.lockedAt)
}

// string createdAt = 16;
inline void ABObject::clear_createdat() {
  createdat_.ClearToEmpty();
}
inline const std::string& ABObject::createdat() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.createdAt)
  return _internal_createdat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_createdat(ArgT0&& arg0, ArgT... args) {
 
 createdat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.createdAt)
}
inline std::string* ABObject::mutable_createdat() {
  std::string* _s = _internal_mutable_createdat();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.createdAt)
  return _s;
}
inline const std::string& ABObject::_internal_createdat() const {
  return createdat_.Get();
}
inline void ABObject::_internal_set_createdat(const std::string& value) {
  
  createdat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_createdat() {
  
  return createdat_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_createdat() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.createdAt)
  return createdat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_createdat(std::string* createdat) {
  if (createdat != nullptr) {
    
  } else {
    
  }
  createdat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdat,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.createdAt)
}

// string createdBy = 17;
inline void ABObject::clear_createdby() {
  createdby_.ClearToEmpty();
}
inline const std::string& ABObject::createdby() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.createdBy)
  return _internal_createdby();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_createdby(ArgT0&& arg0, ArgT... args) {
 
 createdby_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.createdBy)
}
inline std::string* ABObject::mutable_createdby() {
  std::string* _s = _internal_mutable_createdby();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.createdBy)
  return _s;
}
inline const std::string& ABObject::_internal_createdby() const {
  return createdby_.Get();
}
inline void ABObject::_internal_set_createdby(const std::string& value) {
  
  createdby_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_createdby() {
  
  return createdby_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_createdby() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.createdBy)
  return createdby_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_createdby(std::string* createdby) {
  if (createdby != nullptr) {
    
  } else {
    
  }
  createdby_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdby,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.createdBy)
}

// string lockedBy = 18;
inline void ABObject::clear_lockedby() {
  lockedby_.ClearToEmpty();
}
inline const std::string& ABObject::lockedby() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.lockedBy)
  return _internal_lockedby();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_lockedby(ArgT0&& arg0, ArgT... args) {
 
 lockedby_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.lockedBy)
}
inline std::string* ABObject::mutable_lockedby() {
  std::string* _s = _internal_mutable_lockedby();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.lockedBy)
  return _s;
}
inline const std::string& ABObject::_internal_lockedby() const {
  return lockedby_.Get();
}
inline void ABObject::_internal_set_lockedby(const std::string& value) {
  
  lockedby_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_lockedby() {
  
  return lockedby_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_lockedby() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.lockedBy)
  return lockedby_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_lockedby(std::string* lockedby) {
  if (lockedby != nullptr) {
    
  } else {
    
  }
  lockedby_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lockedby,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.lockedBy)
}

// string lockedOn = 19;
inline void ABObject::clear_lockedon() {
  lockedon_.ClearToEmpty();
}
inline const std::string& ABObject::lockedon() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.lockedOn)
  return _internal_lockedon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_lockedon(ArgT0&& arg0, ArgT... args) {
 
 lockedon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.lockedOn)
}
inline std::string* ABObject::mutable_lockedon() {
  std::string* _s = _internal_mutable_lockedon();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.lockedOn)
  return _s;
}
inline const std::string& ABObject::_internal_lockedon() const {
  return lockedon_.Get();
}
inline void ABObject::_internal_set_lockedon(const std::string& value) {
  
  lockedon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_lockedon() {
  
  return lockedon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_lockedon() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.lockedOn)
  return lockedon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_lockedon(std::string* lockedon) {
  if (lockedon != nullptr) {
    
  } else {
    
  }
  lockedon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lockedon,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.lockedOn)
}

// string checkOutComment = 20;
inline void ABObject::clear_checkoutcomment() {
  checkoutcomment_.ClearToEmpty();
}
inline const std::string& ABObject::checkoutcomment() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.checkOutComment)
  return _internal_checkoutcomment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_checkoutcomment(ArgT0&& arg0, ArgT... args) {
 
 checkoutcomment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.checkOutComment)
}
inline std::string* ABObject::mutable_checkoutcomment() {
  std::string* _s = _internal_mutable_checkoutcomment();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.checkOutComment)
  return _s;
}
inline const std::string& ABObject::_internal_checkoutcomment() const {
  return checkoutcomment_.Get();
}
inline void ABObject::_internal_set_checkoutcomment(const std::string& value) {
  
  checkoutcomment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_checkoutcomment() {
  
  return checkoutcomment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_checkoutcomment() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.checkOutComment)
  return checkoutcomment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_checkoutcomment(std::string* checkoutcomment) {
  if (checkoutcomment != nullptr) {
    
  } else {
    
  }
  checkoutcomment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkoutcomment,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.checkOutComment)
}

// string lowLevelLockedOn = 21;
inline void ABObject::clear_lowlevellockedon() {
  lowlevellockedon_.ClearToEmpty();
}
inline const std::string& ABObject::lowlevellockedon() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.lowLevelLockedOn)
  return _internal_lowlevellockedon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_lowlevellockedon(ArgT0&& arg0, ArgT... args) {
 
 lowlevellockedon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.lowLevelLockedOn)
}
inline std::string* ABObject::mutable_lowlevellockedon() {
  std::string* _s = _internal_mutable_lowlevellockedon();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.lowLevelLockedOn)
  return _s;
}
inline const std::string& ABObject::_internal_lowlevellockedon() const {
  return lowlevellockedon_.Get();
}
inline void ABObject::_internal_set_lowlevellockedon(const std::string& value) {
  
  lowlevellockedon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_lowlevellockedon() {
  
  return lowlevellockedon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_lowlevellockedon() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.lowLevelLockedOn)
  return lowlevellockedon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_lowlevellockedon(std::string* lowlevellockedon) {
  if (lowlevellockedon != nullptr) {
    
  } else {
    
  }
  lowlevellockedon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lowlevellockedon,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.lowLevelLockedOn)
}

// string lowLevelLockedBy = 22;
inline void ABObject::clear_lowlevellockedby() {
  lowlevellockedby_.ClearToEmpty();
}
inline const std::string& ABObject::lowlevellockedby() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.lowLevelLockedBy)
  return _internal_lowlevellockedby();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_lowlevellockedby(ArgT0&& arg0, ArgT... args) {
 
 lowlevellockedby_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.lowLevelLockedBy)
}
inline std::string* ABObject::mutable_lowlevellockedby() {
  std::string* _s = _internal_mutable_lowlevellockedby();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.lowLevelLockedBy)
  return _s;
}
inline const std::string& ABObject::_internal_lowlevellockedby() const {
  return lowlevellockedby_.Get();
}
inline void ABObject::_internal_set_lowlevellockedby(const std::string& value) {
  
  lowlevellockedby_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_lowlevellockedby() {
  
  return lowlevellockedby_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_lowlevellockedby() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.lowLevelLockedBy)
  return lowlevellockedby_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_lowlevellockedby(std::string* lowlevellockedby) {
  if (lowlevellockedby != nullptr) {
    
  } else {
    
  }
  lowlevellockedby_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lowlevellockedby,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.lowLevelLockedBy)
}

// string lowLevelLockedAt = 23;
inline void ABObject::clear_lowlevellockedat() {
  lowlevellockedat_.ClearToEmpty();
}
inline const std::string& ABObject::lowlevellockedat() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.lowLevelLockedAt)
  return _internal_lowlevellockedat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_lowlevellockedat(ArgT0&& arg0, ArgT... args) {
 
 lowlevellockedat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.lowLevelLockedAt)
}
inline std::string* ABObject::mutable_lowlevellockedat() {
  std::string* _s = _internal_mutable_lowlevellockedat();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.lowLevelLockedAt)
  return _s;
}
inline const std::string& ABObject::_internal_lowlevellockedat() const {
  return lowlevellockedat_.Get();
}
inline void ABObject::_internal_set_lowlevellockedat(const std::string& value) {
  
  lowlevellockedat_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_lowlevellockedat() {
  
  return lowlevellockedat_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_lowlevellockedat() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.lowLevelLockedAt)
  return lowlevellockedat_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_lowlevellockedat(std::string* lowlevellockedat) {
  if (lowlevellockedat != nullptr) {
    
  } else {
    
  }
  lowlevellockedat_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lowlevellockedat,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.lowLevelLockedAt)
}

// string lowLevelLockComment = 24;
inline void ABObject::clear_lowlevellockcomment() {
  lowlevellockcomment_.ClearToEmpty();
}
inline const std::string& ABObject::lowlevellockcomment() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.lowLevelLockComment)
  return _internal_lowlevellockcomment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_lowlevellockcomment(ArgT0&& arg0, ArgT... args) {
 
 lowlevellockcomment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.lowLevelLockComment)
}
inline std::string* ABObject::mutable_lowlevellockcomment() {
  std::string* _s = _internal_mutable_lowlevellockcomment();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.lowLevelLockComment)
  return _s;
}
inline const std::string& ABObject::_internal_lowlevellockcomment() const {
  return lowlevellockcomment_.Get();
}
inline void ABObject::_internal_set_lowlevellockcomment(const std::string& value) {
  
  lowlevellockcomment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_lowlevellockcomment() {
  
  return lowlevellockcomment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_lowlevellockcomment() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.lowLevelLockComment)
  return lowlevellockcomment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_lowlevellockcomment(std::string* lowlevellockcomment) {
  if (lowlevellockcomment != nullptr) {
    
  } else {
    
  }
  lowlevellockcomment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lowlevellockcomment,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.lowLevelLockComment)
}

// string checkInComment = 25;
inline void ABObject::clear_checkincomment() {
  checkincomment_.ClearToEmpty();
}
inline const std::string& ABObject::checkincomment() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.checkInComment)
  return _internal_checkincomment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_checkincomment(ArgT0&& arg0, ArgT... args) {
 
 checkincomment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.checkInComment)
}
inline std::string* ABObject::mutable_checkincomment() {
  std::string* _s = _internal_mutable_checkincomment();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.checkInComment)
  return _s;
}
inline const std::string& ABObject::_internal_checkincomment() const {
  return checkincomment_.Get();
}
inline void ABObject::_internal_set_checkincomment(const std::string& value) {
  
  checkincomment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_checkincomment() {
  
  return checkincomment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_checkincomment() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.checkInComment)
  return checkincomment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_checkincomment(std::string* checkincomment) {
  if (checkincomment != nullptr) {
    
  } else {
    
  }
  checkincomment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), checkincomment,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.checkInComment)
}

// string comment = 26;
inline void ABObject::clear_comment() {
  comment_.ClearToEmpty();
}
inline const std::string& ABObject::comment() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.comment)
  return _internal_comment();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_comment(ArgT0&& arg0, ArgT... args) {
 
 comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.comment)
}
inline std::string* ABObject::mutable_comment() {
  std::string* _s = _internal_mutable_comment();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.comment)
  return _s;
}
inline const std::string& ABObject::_internal_comment() const {
  return comment_.Get();
}
inline void ABObject::_internal_set_comment(const std::string& value) {
  
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_comment() {
  
  return comment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_comment() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.comment)
  return comment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.comment)
}

// string keywords = 27;
inline void ABObject::clear_keywords() {
  keywords_.ClearToEmpty();
}
inline const std::string& ABObject::keywords() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.keywords)
  return _internal_keywords();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_keywords(ArgT0&& arg0, ArgT... args) {
 
 keywords_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.keywords)
}
inline std::string* ABObject::mutable_keywords() {
  std::string* _s = _internal_mutable_keywords();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.keywords)
  return _s;
}
inline const std::string& ABObject::_internal_keywords() const {
  return keywords_.Get();
}
inline void ABObject::_internal_set_keywords(const std::string& value) {
  
  keywords_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_keywords() {
  
  return keywords_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_keywords() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.keywords)
  return keywords_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_keywords(std::string* keywords) {
  if (keywords != nullptr) {
    
  } else {
    
  }
  keywords_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keywords,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.keywords)
}

// string author = 28;
inline void ABObject::clear_author() {
  author_.ClearToEmpty();
}
inline const std::string& ABObject::author() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.author)
  return _internal_author();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_author(ArgT0&& arg0, ArgT... args) {
 
 author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.author)
}
inline std::string* ABObject::mutable_author() {
  std::string* _s = _internal_mutable_author();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.author)
  return _s;
}
inline const std::string& ABObject::_internal_author() const {
  return author_.Get();
}
inline void ABObject::_internal_set_author(const std::string& value) {
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_author() {
  
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_author() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.author)
  return author_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.author)
}

// string SFSZ = 29;
inline void ABObject::clear_sfsz() {
  sfsz_.ClearToEmpty();
}
inline const std::string& ABObject::sfsz() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.SFSZ)
  return _internal_sfsz();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_sfsz(ArgT0&& arg0, ArgT... args) {
 
 sfsz_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.SFSZ)
}
inline std::string* ABObject::mutable_sfsz() {
  std::string* _s = _internal_mutable_sfsz();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.SFSZ)
  return _s;
}
inline const std::string& ABObject::_internal_sfsz() const {
  return sfsz_.Get();
}
inline void ABObject::_internal_set_sfsz(const std::string& value) {
  
  sfsz_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_sfsz() {
  
  return sfsz_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_sfsz() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.SFSZ)
  return sfsz_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_sfsz(std::string* sfsz) {
  if (sfsz != nullptr) {
    
  } else {
    
  }
  sfsz_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sfsz,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.SFSZ)
}

// string SCRC = 30;
inline void ABObject::clear_scrc() {
  scrc_.ClearToEmpty();
}
inline const std::string& ABObject::scrc() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.SCRC)
  return _internal_scrc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_scrc(ArgT0&& arg0, ArgT... args) {
 
 scrc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.SCRC)
}
inline std::string* ABObject::mutable_scrc() {
  std::string* _s = _internal_mutable_scrc();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.SCRC)
  return _s;
}
inline const std::string& ABObject::_internal_scrc() const {
  return scrc_.Get();
}
inline void ABObject::_internal_set_scrc(const std::string& value) {
  
  scrc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_scrc() {
  
  return scrc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_scrc() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.SCRC)
  return scrc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_scrc(std::string* scrc) {
  if (scrc != nullptr) {
    
  } else {
    
  }
  scrc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scrc,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.SCRC)
}

// string SCRT = 31;
inline void ABObject::clear_scrt() {
  scrt_.ClearToEmpty();
}
inline const std::string& ABObject::scrt() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.SCRT)
  return _internal_scrt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_scrt(ArgT0&& arg0, ArgT... args) {
 
 scrt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.SCRT)
}
inline std::string* ABObject::mutable_scrt() {
  std::string* _s = _internal_mutable_scrt();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.SCRT)
  return _s;
}
inline const std::string& ABObject::_internal_scrt() const {
  return scrt_.Get();
}
inline void ABObject::_internal_set_scrt(const std::string& value) {
  
  scrt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_scrt() {
  
  return scrt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_scrt() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.SCRT)
  return scrt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_scrt(std::string* scrt) {
  if (scrt != nullptr) {
    
  } else {
    
  }
  scrt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scrt,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.SCRT)
}

// string SMOT = 32;
inline void ABObject::clear_smot() {
  smot_.ClearToEmpty();
}
inline const std::string& ABObject::smot() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.SMOT)
  return _internal_smot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_smot(ArgT0&& arg0, ArgT... args) {
 
 smot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.SMOT)
}
inline std::string* ABObject::mutable_smot() {
  std::string* _s = _internal_mutable_smot();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.SMOT)
  return _s;
}
inline const std::string& ABObject::_internal_smot() const {
  return smot_.Get();
}
inline void ABObject::_internal_set_smot(const std::string& value) {
  
  smot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_smot() {
  
  return smot_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_smot() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.SMOT)
  return smot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_smot(std::string* smot) {
  if (smot != nullptr) {
    
  } else {
    
  }
  smot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smot,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.SMOT)
}

// string SCIT = 33;
inline void ABObject::clear_scit() {
  scit_.ClearToEmpty();
}
inline const std::string& ABObject::scit() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.SCIT)
  return _internal_scit();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_scit(ArgT0&& arg0, ArgT... args) {
 
 scit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.SCIT)
}
inline std::string* ABObject::mutable_scit() {
  std::string* _s = _internal_mutable_scit();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.SCIT)
  return _s;
}
inline const std::string& ABObject::_internal_scit() const {
  return scit_.Get();
}
inline void ABObject::_internal_set_scit(const std::string& value) {
  
  scit_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_scit() {
  
  return scit_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_scit() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.SCIT)
  return scit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_scit(std::string* scit) {
  if (scit != nullptr) {
    
  } else {
    
  }
  scit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scit,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.SCIT)
}

// string SIMT = 34;
inline void ABObject::clear_simt() {
  simt_.ClearToEmpty();
}
inline const std::string& ABObject::simt() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.SIMT)
  return _internal_simt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_simt(ArgT0&& arg0, ArgT... args) {
 
 simt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.SIMT)
}
inline std::string* ABObject::mutable_simt() {
  std::string* _s = _internal_mutable_simt();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.SIMT)
  return _s;
}
inline const std::string& ABObject::_internal_simt() const {
  return simt_.Get();
}
inline void ABObject::_internal_set_simt(const std::string& value) {
  
  simt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_simt() {
  
  return simt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_simt() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.SIMT)
  return simt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_simt(std::string* simt) {
  if (simt != nullptr) {
    
  } else {
    
  }
  simt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), simt,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.SIMT)
}

// string SCOT = 35;
inline void ABObject::clear_scot() {
  scot_.ClearToEmpty();
}
inline const std::string& ABObject::scot() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.SCOT)
  return _internal_scot();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_scot(ArgT0&& arg0, ArgT... args) {
 
 scot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.SCOT)
}
inline std::string* ABObject::mutable_scot() {
  std::string* _s = _internal_mutable_scot();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.SCOT)
  return _s;
}
inline const std::string& ABObject::_internal_scot() const {
  return scot_.Get();
}
inline void ABObject::_internal_set_scot(const std::string& value) {
  
  scot_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_scot() {
  
  return scot_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_scot() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.SCOT)
  return scot_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_scot(std::string* scot) {
  if (scot != nullptr) {
    
  } else {
    
  }
  scot_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scot,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.SCOT)
}

// string userFolder = 36;
inline void ABObject::clear_userfolder() {
  userfolder_.ClearToEmpty();
}
inline const std::string& ABObject::userfolder() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.userFolder)
  return _internal_userfolder();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_userfolder(ArgT0&& arg0, ArgT... args) {
 
 userfolder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.userFolder)
}
inline std::string* ABObject::mutable_userfolder() {
  std::string* _s = _internal_mutable_userfolder();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.userFolder)
  return _s;
}
inline const std::string& ABObject::_internal_userfolder() const {
  return userfolder_.Get();
}
inline void ABObject::_internal_set_userfolder(const std::string& value) {
  
  userfolder_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_userfolder() {
  
  return userfolder_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_userfolder() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.userFolder)
  return userfolder_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_userfolder(std::string* userfolder) {
  if (userfolder != nullptr) {
    
  } else {
    
  }
  userfolder_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userfolder,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.userFolder)
}

// string userHandle = 37;
inline void ABObject::clear_userhandle() {
  userhandle_.ClearToEmpty();
}
inline const std::string& ABObject::userhandle() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.userHandle)
  return _internal_userhandle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_userhandle(ArgT0&& arg0, ArgT... args) {
 
 userhandle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.userHandle)
}
inline std::string* ABObject::mutable_userhandle() {
  std::string* _s = _internal_mutable_userhandle();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.userHandle)
  return _s;
}
inline const std::string& ABObject::_internal_userhandle() const {
  return userhandle_.Get();
}
inline void ABObject::_internal_set_userhandle(const std::string& value) {
  
  userhandle_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_userhandle() {
  
  return userhandle_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_userhandle() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.userHandle)
  return userhandle_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_userhandle(std::string* userhandle) {
  if (userhandle != nullptr) {
    
  } else {
    
  }
  userhandle_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userhandle,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.userHandle)
}

// string userSession = 38;
inline void ABObject::clear_usersession() {
  usersession_.ClearToEmpty();
}
inline const std::string& ABObject::usersession() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.userSession)
  return _internal_usersession();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_usersession(ArgT0&& arg0, ArgT... args) {
 
 usersession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.userSession)
}
inline std::string* ABObject::mutable_usersession() {
  std::string* _s = _internal_mutable_usersession();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.userSession)
  return _s;
}
inline const std::string& ABObject::_internal_usersession() const {
  return usersession_.Get();
}
inline void ABObject::_internal_set_usersession(const std::string& value) {
  
  usersession_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_usersession() {
  
  return usersession_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_usersession() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.userSession)
  return usersession_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_usersession(std::string* usersession) {
  if (usersession != nullptr) {
    
  } else {
    
  }
  usersession_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usersession,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.userSession)
}

// string userMachine = 39;
inline void ABObject::clear_usermachine() {
  usermachine_.ClearToEmpty();
}
inline const std::string& ABObject::usermachine() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.userMachine)
  return _internal_usermachine();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_usermachine(ArgT0&& arg0, ArgT... args) {
 
 usermachine_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.userMachine)
}
inline std::string* ABObject::mutable_usermachine() {
  std::string* _s = _internal_mutable_usermachine();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.userMachine)
  return _s;
}
inline const std::string& ABObject::_internal_usermachine() const {
  return usermachine_.Get();
}
inline void ABObject::_internal_set_usermachine(const std::string& value) {
  
  usermachine_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_usermachine() {
  
  return usermachine_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_usermachine() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.userMachine)
  return usermachine_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_usermachine(std::string* usermachine) {
  if (usermachine != nullptr) {
    
  } else {
    
  }
  usermachine_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usermachine,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.userMachine)
}

// string userName = 40;
inline void ABObject::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& ABObject::username() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.userName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.userName)
}
inline std::string* ABObject::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.userName)
  return _s;
}
inline const std::string& ABObject::_internal_username() const {
  return username_.Get();
}
inline void ABObject::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_username() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.userName)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.userName)
}

// string nxNSignOff_ItemStatus = 41;
inline void ABObject::clear_nxnsignoff_itemstatus() {
  nxnsignoff_itemstatus_.ClearToEmpty();
}
inline const std::string& ABObject::nxnsignoff_itemstatus() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.nxNSignOff_ItemStatus)
  return _internal_nxnsignoff_itemstatus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_nxnsignoff_itemstatus(ArgT0&& arg0, ArgT... args) {
 
 nxnsignoff_itemstatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.nxNSignOff_ItemStatus)
}
inline std::string* ABObject::mutable_nxnsignoff_itemstatus() {
  std::string* _s = _internal_mutable_nxnsignoff_itemstatus();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.nxNSignOff_ItemStatus)
  return _s;
}
inline const std::string& ABObject::_internal_nxnsignoff_itemstatus() const {
  return nxnsignoff_itemstatus_.Get();
}
inline void ABObject::_internal_set_nxnsignoff_itemstatus(const std::string& value) {
  
  nxnsignoff_itemstatus_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_nxnsignoff_itemstatus() {
  
  return nxnsignoff_itemstatus_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_nxnsignoff_itemstatus() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.nxNSignOff_ItemStatus)
  return nxnsignoff_itemstatus_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_nxnsignoff_itemstatus(std::string* nxnsignoff_itemstatus) {
  if (nxnsignoff_itemstatus != nullptr) {
    
  } else {
    
  }
  nxnsignoff_itemstatus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nxnsignoff_itemstatus,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.nxNSignOff_ItemStatus)
}

// string nxNSignOff_ItemDueDate = 42;
inline void ABObject::clear_nxnsignoff_itemduedate() {
  nxnsignoff_itemduedate_.ClearToEmpty();
}
inline const std::string& ABObject::nxnsignoff_itemduedate() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.nxNSignOff_ItemDueDate)
  return _internal_nxnsignoff_itemduedate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_nxnsignoff_itemduedate(ArgT0&& arg0, ArgT... args) {
 
 nxnsignoff_itemduedate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.nxNSignOff_ItemDueDate)
}
inline std::string* ABObject::mutable_nxnsignoff_itemduedate() {
  std::string* _s = _internal_mutable_nxnsignoff_itemduedate();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.nxNSignOff_ItemDueDate)
  return _s;
}
inline const std::string& ABObject::_internal_nxnsignoff_itemduedate() const {
  return nxnsignoff_itemduedate_.Get();
}
inline void ABObject::_internal_set_nxnsignoff_itemduedate(const std::string& value) {
  
  nxnsignoff_itemduedate_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_nxnsignoff_itemduedate() {
  
  return nxnsignoff_itemduedate_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_nxnsignoff_itemduedate() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.nxNSignOff_ItemDueDate)
  return nxnsignoff_itemduedate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_nxnsignoff_itemduedate(std::string* nxnsignoff_itemduedate) {
  if (nxnsignoff_itemduedate != nullptr) {
    
  } else {
    
  }
  nxnsignoff_itemduedate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nxnsignoff_itemduedate,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.nxNSignOff_ItemDueDate)
}

// string nxNSignOff_ItemUser = 43;
inline void ABObject::clear_nxnsignoff_itemuser() {
  nxnsignoff_itemuser_.ClearToEmpty();
}
inline const std::string& ABObject::nxnsignoff_itemuser() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.nxNSignOff_ItemUser)
  return _internal_nxnsignoff_itemuser();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_nxnsignoff_itemuser(ArgT0&& arg0, ArgT... args) {
 
 nxnsignoff_itemuser_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.nxNSignOff_ItemUser)
}
inline std::string* ABObject::mutable_nxnsignoff_itemuser() {
  std::string* _s = _internal_mutable_nxnsignoff_itemuser();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.nxNSignOff_ItemUser)
  return _s;
}
inline const std::string& ABObject::_internal_nxnsignoff_itemuser() const {
  return nxnsignoff_itemuser_.Get();
}
inline void ABObject::_internal_set_nxnsignoff_itemuser(const std::string& value) {
  
  nxnsignoff_itemuser_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_nxnsignoff_itemuser() {
  
  return nxnsignoff_itemuser_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_nxnsignoff_itemuser() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.nxNSignOff_ItemUser)
  return nxnsignoff_itemuser_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_nxnsignoff_itemuser(std::string* nxnsignoff_itemuser) {
  if (nxnsignoff_itemuser != nullptr) {
    
  } else {
    
  }
  nxnsignoff_itemuser_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nxnsignoff_itemuser,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.nxNSignOff_ItemUser)
}

// int64 changedAt = 44;
inline void ABObject::clear_changedat() {
  changedat_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABObject::_internal_changedat() const {
  return changedat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ABObject::changedat() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.changedAt)
  return _internal_changedat();
}
inline void ABObject::_internal_set_changedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  changedat_ = value;
}
inline void ABObject::set_changedat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_changedat(value);
  // @@protoc_insertion_point(field_set:vfs.ABObject.changedAt)
}

// string changedBy = 45;
inline void ABObject::clear_changedby() {
  changedby_.ClearToEmpty();
}
inline const std::string& ABObject::changedby() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.changedBy)
  return _internal_changedby();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_changedby(ArgT0&& arg0, ArgT... args) {
 
 changedby_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.changedBy)
}
inline std::string* ABObject::mutable_changedby() {
  std::string* _s = _internal_mutable_changedby();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.changedBy)
  return _s;
}
inline const std::string& ABObject::_internal_changedby() const {
  return changedby_.Get();
}
inline void ABObject::_internal_set_changedby(const std::string& value) {
  
  changedby_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_changedby() {
  
  return changedby_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_changedby() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.changedBy)
  return changedby_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_changedby(std::string* changedby) {
  if (changedby != nullptr) {
    
  } else {
    
  }
  changedby_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), changedby,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.changedBy)
}

// string parentPath = 46;
inline void ABObject::clear_parentpath() {
  parentpath_.ClearToEmpty();
}
inline const std::string& ABObject::parentpath() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.parentPath)
  return _internal_parentpath();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_parentpath(ArgT0&& arg0, ArgT... args) {
 
 parentpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.parentPath)
}
inline std::string* ABObject::mutable_parentpath() {
  std::string* _s = _internal_mutable_parentpath();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.parentPath)
  return _s;
}
inline const std::string& ABObject::_internal_parentpath() const {
  return parentpath_.Get();
}
inline void ABObject::_internal_set_parentpath(const std::string& value) {
  
  parentpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_parentpath() {
  
  return parentpath_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_parentpath() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.parentPath)
  return parentpath_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_parentpath(std::string* parentpath) {
  if (parentpath != nullptr) {
    
  } else {
    
  }
  parentpath_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentpath,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.parentPath)
}

// string nxN_VersionNumber = 47;
inline void ABObject::clear_nxn_versionnumber() {
  nxn_versionnumber_.ClearToEmpty();
}
inline const std::string& ABObject::nxn_versionnumber() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.nxN_VersionNumber)
  return _internal_nxn_versionnumber();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ABObject::set_nxn_versionnumber(ArgT0&& arg0, ArgT... args) {
 
 nxn_versionnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vfs.ABObject.nxN_VersionNumber)
}
inline std::string* ABObject::mutable_nxn_versionnumber() {
  std::string* _s = _internal_mutable_nxn_versionnumber();
  // @@protoc_insertion_point(field_mutable:vfs.ABObject.nxN_VersionNumber)
  return _s;
}
inline const std::string& ABObject::_internal_nxn_versionnumber() const {
  return nxn_versionnumber_.Get();
}
inline void ABObject::_internal_set_nxn_versionnumber(const std::string& value) {
  
  nxn_versionnumber_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ABObject::_internal_mutable_nxn_versionnumber() {
  
  return nxn_versionnumber_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ABObject::release_nxn_versionnumber() {
  // @@protoc_insertion_point(field_release:vfs.ABObject.nxN_VersionNumber)
  return nxn_versionnumber_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ABObject::set_allocated_nxn_versionnumber(std::string* nxn_versionnumber) {
  if (nxn_versionnumber != nullptr) {
    
  } else {
    
  }
  nxn_versionnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nxn_versionnumber,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:vfs.ABObject.nxN_VersionNumber)
}

// bool isDirectory = 48;
inline void ABObject::clear_isdirectory() {
  isdirectory_ = false;
}
inline bool ABObject::_internal_isdirectory() const {
  return isdirectory_;
}
inline bool ABObject::isdirectory() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.isDirectory)
  return _internal_isdirectory();
}
inline void ABObject::_internal_set_isdirectory(bool value) {
  
  isdirectory_ = value;
}
inline void ABObject::set_isdirectory(bool value) {
  _internal_set_isdirectory(value);
  // @@protoc_insertion_point(field_set:vfs.ABObject.isDirectory)
}

// bool localOnly = 49;
inline void ABObject::clear_localonly() {
  localonly_ = false;
}
inline bool ABObject::_internal_localonly() const {
  return localonly_;
}
inline bool ABObject::localonly() const {
  // @@protoc_insertion_point(field_get:vfs.ABObject.localOnly)
  return _internal_localonly();
}
inline void ABObject::_internal_set_localonly(bool value) {
  
  localonly_ = value;
}
inline void ABObject::set_localonly(bool value) {
  _internal_set_localonly(value);
  // @@protoc_insertion_point(field_set:vfs.ABObject.localOnly)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vfs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_object_2eproto
