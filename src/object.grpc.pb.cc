// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: object.proto

#include "object.pb.h"
#include "object.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace vfs {

static const char* NameService_method_names[] = {
  "/vfs.NameService/ListDirectory",
  "/vfs.NameService/FindObject",
};

std::unique_ptr< NameService::Stub> NameService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NameService::Stub> stub(new NameService::Stub(channel, options));
  return stub;
}

NameService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListDirectory_(NameService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_FindObject_(NameService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::vfs::ABObject>* NameService::Stub::ListDirectoryRaw(::grpc::ClientContext* context, const ::vfs::PathRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::vfs::ABObject>::Create(channel_.get(), rpcmethod_ListDirectory_, context, request);
}

void NameService::Stub::async::ListDirectory(::grpc::ClientContext* context, const ::vfs::PathRequest* request, ::grpc::ClientReadReactor< ::vfs::ABObject>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::vfs::ABObject>::Create(stub_->channel_.get(), stub_->rpcmethod_ListDirectory_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::vfs::ABObject>* NameService::Stub::AsyncListDirectoryRaw(::grpc::ClientContext* context, const ::vfs::PathRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vfs::ABObject>::Create(channel_.get(), cq, rpcmethod_ListDirectory_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::vfs::ABObject>* NameService::Stub::PrepareAsyncListDirectoryRaw(::grpc::ClientContext* context, const ::vfs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::vfs::ABObject>::Create(channel_.get(), cq, rpcmethod_ListDirectory_, context, request, false, nullptr);
}

::grpc::Status NameService::Stub::FindObject(::grpc::ClientContext* context, const ::vfs::PathRequest& request, ::vfs::ABObject* response) {
  return ::grpc::internal::BlockingUnaryCall< ::vfs::PathRequest, ::vfs::ABObject, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_FindObject_, context, request, response);
}

void NameService::Stub::async::FindObject(::grpc::ClientContext* context, const ::vfs::PathRequest* request, ::vfs::ABObject* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::vfs::PathRequest, ::vfs::ABObject, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindObject_, context, request, response, std::move(f));
}

void NameService::Stub::async::FindObject(::grpc::ClientContext* context, const ::vfs::PathRequest* request, ::vfs::ABObject* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_FindObject_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::vfs::ABObject>* NameService::Stub::PrepareAsyncFindObjectRaw(::grpc::ClientContext* context, const ::vfs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::vfs::ABObject, ::vfs::PathRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_FindObject_, context, request);
}

::grpc::ClientAsyncResponseReader< ::vfs::ABObject>* NameService::Stub::AsyncFindObjectRaw(::grpc::ClientContext* context, const ::vfs::PathRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncFindObjectRaw(context, request, cq);
  result->StartCall();
  return result;
}

NameService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NameService::Service, ::vfs::PathRequest, ::vfs::ABObject>(
          [](NameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vfs::PathRequest* req,
             ::grpc::ServerWriter<::vfs::ABObject>* writer) {
               return service->ListDirectory(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NameService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NameService::Service, ::vfs::PathRequest, ::vfs::ABObject, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NameService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::vfs::PathRequest* req,
             ::vfs::ABObject* resp) {
               return service->FindObject(ctx, req, resp);
             }, this)));
}

NameService::Service::~Service() {
}

::grpc::Status NameService::Service::ListDirectory(::grpc::ServerContext* context, const ::vfs::PathRequest* request, ::grpc::ServerWriter< ::vfs::ABObject>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NameService::Service::FindObject(::grpc::ServerContext* context, const ::vfs::PathRequest* request, ::vfs::ABObject* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace vfs

